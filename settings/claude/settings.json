{
  "model": "opusplan",
  "statusLine": {
    "type": "command",
    "command": "input=$(cat); printf \"\\033[2m%s@%s \\033[36m%s\\033[0m \\033[2m[%s]\\033[0m\" \"$(whoami)\" \"$(hostname -s)\" \"$(echo \"$input\" | jq -r '.workspace.current_dir | gsub(\".*/\"; \"\")' 2>/dev/null || basename \"$(echo \"$input\" | jq -r '.workspace.current_dir')\" 2>/dev/null || echo \"unknown\")\" \"$(echo \"$input\" | jq -r '.model.display_name' 2>/dev/null || echo \"Claude\")\""
  },
  "permissions": {
    "allow": [
      // Git tools
      "Bash(git:*)",

      // GitHub tools
      "Bash(gh:*)",

      // Python tools
      "Bash(mypy:*)",
      "Bash(pixi:*)",
      "Bash(pytest:*)",
      "Bash(ruff:*)",
      "Bash(uv:*)",

      // Code quality tools
      "Bash(pre-commit:*)",
      "Bash(prek:*)",
      "Bash(shellcheck:*)",
      "Bash(shfmt:*)",

      // Search and navigation tools
      "Bash(ast-grep:*)",
      "Bash(fd:*)",
      "Bash(fzf:*)",
      "Bash(rg:*)",
      "Bash(tree:*)",

      // File operations
      "Bash(cat:*)",
      "Bash(head:*)",
      "Bash(ls:*)",
      "Bash(readlink:*)",
      "Bash(test:*)",

      // Data processing tools
      "Bash(jq:*)",
      "Bash(yq:*)",

      // System tools
      "Bash(env:*)",
      "Bash(export:*)",
      "Bash(wait:*)",

      // Comparison tools
      "Bash(difft:*)",

      // Claude tools
      "Bash(claude -p:*)",

      // Deprecated tools (blocked by hooks)
      "Bash(awk:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(sed:*)",

      // MCP tools
      "mcp__claude-code__Task",
      "mcp__ide__getDiagnostics",

      // Memory tools
      "mcp__local-semantic-memory__archive",
      "mcp__local-semantic-memory__create_embedding",
      "mcp__local-semantic-memory__get_embedding_info",
      "mcp__local-semantic-memory__get_embeddings_batch",
      "mcp__local-semantic-memory__get_memory_embedding",
      "mcp__local-semantic-memory__hello",
      "mcp__local-semantic-memory__list_categories",
      "mcp__local-semantic-memory__list_recent",
      "mcp__local-semantic-memory__list_tags",
      "mcp__local-semantic-memory__recall",
      "mcp__local-semantic-memory__remember",
      "mcp__local-semantic-memory__remember_batch",
      "mcp__local-semantic-memory__restore",
      "mcp__local-semantic-memory__search_content",
      "mcp__local-semantic-memory__search_semantic",
      "mcp__local-semantic-memory__search_similar",
      "mcp__local-semantic-memory__semantic_search_stats",
      "mcp__local-semantic-memory__stats",
      "mcp__local-semantic-memory__update",
      "mcp__local-semantic-memory__update_batch",

      // Read permissions
      "Read(//Users/jacob.hurlburt/**)",

      // Web access
      "WebFetch(domain:*)"
    ],
    "deny": [
      "mcp__claude-code__Bash",
      "mcp__claude-code__Edit",
      "mcp__claude-code__Glob",
      "mcp__claude-code__Grep",
      "mcp__claude-code__MultiEdit",
      "mcp__claude-code__NotebookEdit",
      "mcp__claude-code__Read",
      "mcp__claude-code__TodoWrite",
      "mcp__claude-code__WebFetch",
      "mcp__claude-code__WebSearch",
      "mcp__claude-code__Write"
    ],
    "ask": [
      "Bash(brew install:*)",
      "Bash(brew uninstall:*)",
      "Bash(pixi global:*)",
      "Bash(pixi run:*)",
      "Bash(uv run:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git cherry-pick:*)",
      "Bash(git push:*)",
      "Bash(git reset:*)",
      "Bash(git revert:*)"
    ]
  },
  "outputStyle": "Explanatory",
  "hooks": {
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "tree -I '__pycache__|*.pyc|.git|node_modules' -L 5"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "cmd=$(jq -r '.tool_input.command // \"\"' 2>/dev/null); echo \"$cmd\" | rg -q '^(grep|egrep|fgrep)' && { echo '{\"hookSpecificOutput\": {\"hookEventName\": \"PreToolUse\", \"permissionDecision\": \"deny\", \"permissionDecisionReason\": \"Use rg (Grep tool) for text search, ast-grep for code structures\"}}'; exit 0; } || exit 0"
          },
          {
            "type": "command",
            "command": "cmd=$(jq -r '.tool_input.command // \"\"' 2>/dev/null); echo \"$cmd\" | rg -q '^find' && { echo '{\"hookSpecificOutput\": {\"hookEventName\": \"PreToolUse\", \"permissionDecision\": \"deny\", \"permissionDecisionReason\": \"Use fd - fd (by name), fd -p (by path), fd . <dir> (list), fd -e <ext> <pattern>\"}}'; exit 0; } || exit 0"
          },
          {
            "type": "command",
            "command": "cmd=$(jq -r '.tool_input.command // \"\"' 2>/dev/null); echo \"$cmd\" | rg -q 'ls.*-(la|R)' && { echo '{\"hookSpecificOutput\": {\"hookEventName\": \"PreToolUse\", \"permissionDecision\": \"deny\", \"permissionDecisionReason\": \"Use fd . <directory> to list files in directory\"}}'; exit 0; } || exit 0"
          },
          {
            "type": "command",
            "command": "cmd=$(jq -r '.tool_input.command // \"\"' 2>/dev/null); echo \"$cmd\" | rg -q '^(sed|awk)' && { echo '{\"hookSpecificOutput\": {\"hookEventName\": \"PreToolUse\", \"permissionDecision\": \"deny\", \"permissionDecisionReason\": \"Use jq for JSON, yq for YAML/XML, rg for text search\"}}'; exit 0; } || exit 0"
          }
        ]
      },
      {
        "matcher": "Grep",
        "hooks": [
          {
            "type": "command",
            "command": "pattern=$(jq -r '.tool_input.pattern // \"\"' 2>/dev/null); echo \"$pattern\" | rg -q '\\b(class|function|def|import|interface|struct|const|let|var|type|enum)\\b' && echo 'SUGGESTION: Use ast-grep for code structures - ast-grep --lang <ts|tsx|py|js|rust|json> -p \"<pattern>\"' >&2; exit 0"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "test -f .pre-commit-config.yaml && { prek run --all-files 2>&1 || exit 2; }"
          }
        ]
      }
    ]
  }
}
