{
  "env": {
    "BASH_DEFAULT_TIMEOUT_MS": "30000"
  },
  "permissions": {
    "allow": [
      "Bash(ast-grep:*)",
      "Bash(awk:*)",
      "Bash(cat:*)",
      "Bash(claude -p:*)",
      "Bash(difft:*)",
      "Bash(env:*)",
      "Bash(export:*)",
      "Bash(fd:*)",
      "Bash(find:*)",
      "Bash(fzf:*)",
      "Bash(gh:*)",
      "Bash(git:*)",
      "Bash(grep:*)",
      "Bash(head:*)",
      "Bash(jq:*)",
      "Bash(ls:*)",
      "Bash(mypy:*)",
      "Bash(pixi:*)",
      "Bash(pre-commit:*)",
      "Bash(prek:*)",
      "Bash(pytest:*)",
      "Bash(readlink:*)",
      "Bash(rg:*)",
      "Bash(ruff:*)",
      "Bash(sed:*)",
      "Bash(shellcheck:*)",
      "Bash(shfmt:*)",
      "Bash(sqlfluff:*)",
      "Bash(sqlfmt:*)",
      "Bash(tail:*)",
      "Bash(test:*)",
      "Bash(tree:*)",
      "Bash(uv:*)",
      "Bash(wait:*)",
      "Bash(yq:*)",
      "Bash(uv run pytest:*)",
      "Bash(uv run mypy:*)",
      "Bash(uv run ruff:*)",
      "Bash(pixi run pytest:*)",
      "Bash(pixi run mypy:*)",
      "Bash(pixi run ruff:*)",
      "mcp__claude-code__Task",
      "mcp__ide__getDiagnostics",
      "mcp__atlassian__getConfluencePage",
      "mcp__atlassian__getConfluenceSpaces",
      "mcp__atlassian__getPagesInConfluenceSpace",
      "mcp__atlassian__searchConfluenceUsingCql",
      "mcp__atlassian__getConfluencePageDescendants",
      "mcp__atlassian__getJiraIssue",
      "mcp__atlassian__getVisibleJiraProjects",
      "mcp__atlassian__getTransitionsForJiraIssue",
      "mcp__atlassian__searchJiraIssuesUsingJql",
      "mcp__local-semantic-memory__archive",
      "mcp__local-semantic-memory__create_embedding",
      "mcp__local-semantic-memory__get_embedding_info",
      "mcp__local-semantic-memory__get_embeddings_batch",
      "mcp__local-semantic-memory__get_memory_embedding",
      "mcp__local-semantic-memory__hello",
      "mcp__local-semantic-memory__list_categories",
      "mcp__local-semantic-memory__list_recent",
      "mcp__local-semantic-memory__list_tags",
      "mcp__local-semantic-memory__recall",
      "mcp__local-semantic-memory__remember",
      "mcp__local-semantic-memory__remember_batch",
      "mcp__local-semantic-memory__restore",
      "mcp__local-semantic-memory__search_content",
      "mcp__local-semantic-memory__search_semantic",
      "mcp__local-semantic-memory__search_similar",
      "mcp__local-semantic-memory__semantic_search_stats",
      "mcp__local-semantic-memory__stats",
      "mcp__local-semantic-memory__update",
      "mcp__local-semantic-memory__update_batch",
      "Read(//Users/jacob.hurlburt/**)",
      "WebFetch(domain:*)"
    ],
    "deny": [
      "mcp__claude-code__Bash",
      "mcp__claude-code__Edit",
      "mcp__claude-code__Glob",
      "mcp__claude-code__Grep",
      "mcp__claude-code__MultiEdit",
      "mcp__claude-code__NotebookEdit",
      "mcp__claude-code__Read",
      "mcp__claude-code__TodoWrite",
      "mcp__claude-code__WebFetch",
      "mcp__claude-code__WebSearch",
      "mcp__claude-code__Write"
    ],
    "ask": [
      "mcp__atlassian__createConfluencePage",
      "mcp__atlassian__updateConfluencePage",
      "mcp__atlassian__editJiraIssue",
      "mcp__atlassian__addCommentToJiraIssue",
      "mcp__atlassian__transitionJiraIssue",
      "mcp__atlassian__createJiraIssue",
      "Bash(brew install:*)",
      "Bash(brew uninstall:*)",
      "Bash(git add:*)",
      "Bash(git cherry-pick:*)",
      "Bash(git commit:*)",
      "Bash(git reset:*)",
      "Bash(git revert:*)",
      "Bash(pixi global:*)",
      "Bash(pixi run:*)",
      "Bash(terraform:*)",
      "Bash(terramate:*)",
      "Bash(uv run:*)",
      "Bash(gh pr create:*)"
    ],
    "defaultMode": "acceptEdits"
  },
  "statusLine": {
    "type": "command",
    "command": "input=$(cat); printf \"\\033[2m%s@%s \\033[36m%s\\033[0m \\033[2m[%s]\\033[0m\" \"$(whoami)\" \"$(hostname -s)\" \"$(echo \"$input\" | jq -r '.workspace.current_dir | gsub(\".*/\"; \"\")' 2>/dev/null || basename \"$(echo \"$input\" | jq -r '.workspace.current_dir')\" 2>/dev/null || echo \"unknown\")\" \"$(echo \"$input\" | jq -r '.model.display_name' 2>/dev/null || echo \"Claude\")\""
  },
  "extraKnownMarketplaces": {
    "claude-settings": {
      "source": {
        "source": "directory",
        "path": "/Users/jacob.hurlburt/repos/claude-settings"
      }
    }
  },
  "enabledPlugins": {
    "superpowers@claude-settings": true,
    "elements-of-style@claude-settings": true
  },
  "outputStyle": "Default",
  "alwaysThinkingEnabled": false
}
